name: monorepo-main

concurrency:
  group: main-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches:
      - 'main'
    tags-ignore:
      - '*'
  pull_request:
    branches:
      - 'main'
  workflow_dispatch:
    inputs:
      loose:
        description: 'Set to false to make the workflow continue on error'
        required: false
        default: 'true'

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Lint all packages
        uses: ./.github/actions/golangci-lint-monorepo-action
        with:
          go-version: '>=1.24.0'
          golangci-lint-version: latest

  list-modules:
    needs: lint
    runs-on: ubuntu-latest
    outputs:
      modules: ${{ steps.modulelist.outputs.modules }}
    steps:
      - uses: actions/checkout@v4
      - name: Get monorepo modules
        id: modulelist
        uses: ./.github/actions/go-test-monorepo-action
        with:
          go-version: '>=1.24.0'
          only-module-list: true

  test-n-coverage:
    needs: list-modules
    strategy:
      matrix:
        # https://github.com/actions/runner-images?tab=readme-ov-file
        platform: [ ubuntu-latest, macos-15 ]
        # platform: [ubuntu-latest, , windows-latest]
      fail-fast: false
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4
      - name: Run tests and generate coverage reports
        id: run-tests
        uses: ./.github/actions/go-test-monorepo-action
        with:
          go-version: '>=1.24.0'
          race: ${{ github.event.inputs.loose != 'true' }}
          fail-fast: ${{ github.event.inputs.loose != 'true' }}
          continue-on-error: ${{ github.event.inputs.loose == 'true' }}

      - name: Upload primary monorepo coverage file
        if: success() || github.event.inputs.loose == 'true'
        uses: coverallsapp/github-action@v2
        with:
          flag-name: happy
          parallel: true
          github-token: ${{ secrets.GITHUB_TOKEN }}
          file: coverage.out

      - name: Upload per-module coverage using Coveralls CLI
        if: success() || github.event.inputs.loose == 'true'
        env:
          COVERALLS_REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          modules='${{ needs.list-modules.outputs.modules }}'
          echo "$modules" | jq -r '.[]' | while read -r module; do
            # Skip the main module (".") since we already uploaded its coverage
            if [[ "$module" == "." ]]; then
              continue
            fi
            coverage_file="$module/coverage.out"
            if [[ -f "$coverage_file" && $(wc -l < "$coverage_file") -gt 1 ]]; then
              clean_module_name="${module#./}"
              echo "Uploading coverage for module: $clean_module_name"
              coveralls report "$coverage_file" --job-flag="$clean_module_name"
            else
              echo "::warning title=Coverage Missing::No coverage file found for module '$module' at path '$coverage_file'"
            fi
          done
        shell: bash

  finish-coverage-report:
    needs: test-n-coverage
    if: success() || github.event.inputs.loose == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Coveralls Finish
        uses: coverallsapp/github-action@v2
        with:
          parallel-finished: true
